system:
  driver_limit: auto
  headless: false

proxy:
  enabled: false
  no_ssl_verify: false
  socks5_mode: false
  resolve_dns_locally: false
  credentials:
    enabled: false
    username: ""
    password: ""
  list: 
    # - 123.456.7.89:8080

resources:
  driver_autoscaling:
    scaling_check_interval: 0.5
    step_up: 2
    step_down: 1
    scale_down_cooldown: 5.0
    spawn_buffer: 3.0
  
  driver_spawning:
    # these settings will control the start up speed of the pool
    # up max_spawns_per_window for a more aggressive start up
    spawn_window_sec: 10
    max_spawns_per_window: 5

  memory_tuning:
    buffer:
      up_margin: 5
      down_margin: 10
      adjust_rate: 2
      
    pressure:
      history: 5
      system_check_interval: 2.0
      mem_threshold: 75.0
      cpu_threshold: 80.0
      
    pressure_blocking:
      # during high load max time a driver will wait before going ahead with its work. 
      max_wait_time: 30.0
      # workers wait in N second chunks before checking again
      wait_chunk_time: 3.0

colors:
  normal: "white"
  error: "light_grey"
  keyword: "magenta"
  loading: "magenta"
  success: "green"
  failure: "red"
  warning: "yellow"
  hint: "light_grey"

ui:
  verbose_output: false
  bold_output: true

misc:
  debug_mode: false
  geckodriver_version: "0.35.0"
  python_version: "3.10"

  logging:
    interval: 10
    # turn on/off [enter] status console
    # status console is set up inside setup_runtime()
    status_console: true

  thread_monitoring:
    interval_sec: 1
  
  # default timeouts
  timeouts:
    body_load: 5
    url_loading: 5
    max_task_retries: 2
    shutdown: 10
    join: 10
    worker: 5
    idle_cycle_check: 6
    # max time a driver can sit in the queue
    # drivers are only put back in the queue between
    # tasks. should rarely ever trigger at 30 secs
    max_driver_idle_sec: 30
    # how long to wait before trying to recreate a failed driver
    recreate_max_delay: 5
    # driver spawn timeouts
    spawn_wait_delay: 3

